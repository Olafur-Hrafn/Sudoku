{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../userContext\";\nimport '../components/styles.css';\nimport Dropdown from \"./DropDown\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SudokuBoard(props) {\n  _s();\n\n  const {\n    solvedBoard,\n    difficultyLevel,\n    SetSolvedBoard,\n    SetCurrentBoard,\n    isSolved,\n    SetIsSolved,\n    setWindowWidth\n  } = useContext(UserContext);\n  let startingBoard = []; //const [solvedBoard,SetSolvedBoard] = useState([])\n  //const [startingBoard,SetStartingBoard] = useState([])\n\n  function generateBoard() {\n    const matrix = Array(9).fill().map(() => Array(9).fill(0)); //  let nextZero = FindZero(board)\n    // 3 steps to randomly assign 3x3 squares of numbers\n    // Top left 3x3\n\n    let rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 0; i < 3; i++) {\n      for (let k = 0; k < 3; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.splice(0, 1);\n      }\n    } // re initialize rndNumbers and shuffle to add to middle 3x3\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 3; i < 6; i++) {\n      for (let k = 3; k < 6; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    } // shuffle and arrange the last 3x3 ( bottom right square)\n    // re initialize rndNumbers\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 6; i < 9; i++) {\n      for (let k = 6; k < 9; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    }\n\n    console.log(matrix);\n    startingBoard = [...matrix];\n    console.log(startingBoard);\n    SolveBoard(startingBoard);\n  }\n\n  function shuffle(numberArray) {\n    // Fisher Yates Shuffle //\n    let currentIndex = numberArray.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [numberArray[currentIndex], numberArray[randomIndex]] = [numberArray[randomIndex], numberArray[currentIndex]];\n    } // Used like so\n    //console.log(numberArray);\n\n\n    return numberArray;\n  }\n\n  function FindZero(board) {\n    //finds next 0 on board and returns its location//\n    let zeroPlacement = [];\n\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] === 0) {\n          zeroPlacement.push(i);\n          zeroPlacement.push(j);\n          return zeroPlacement;\n        }\n\n        if (zeroPlacement.length !== 0) {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function IsValidPlacement(row, col, value) {\n    // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\n    for (let i = 0; i < startingBoard.length; i++) {\n      if (startingBoard[row][i] === value) {\n        return false;\n      }\n\n      if (startingBoard[i][col] === value) {\n        return false;\n      }\n\n      if (startingBoard[Math.floor(row - row % 3 + i / 3)][Math.floor(col - col % 3 + i % 3)] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function SolveBoard(boardToSolve) {\n    let solved = startingBoard;\n    let nextZero = [];\n    nextZero = FindZero(solved); // Base Case\n    // uses find_zero to locate 0, if there are no more 0, job done, return board\n\n    if (nextZero === null) {\n      return solved;\n    } // Recursive Case\n    else {\n      let row = nextZero[0];\n      let col = nextZero[1];\n\n      for (let i = 1; i < 10; i++) {\n        if (IsValidPlacement(row, col, i) === true) {\n          solved[row][col] = i;\n          let updatedBoard = [];\n          updatedBoard = SolveBoard(updatedBoard); // if there is a solution, return the solution\n\n          if (updatedBoard != null) {\n            solved = [...updatedBoard];\n            SetSolvedBoard([...solved]);\n            startingBoard = [];\n            return updatedBoard;\n          } else {\n            solved[row][col] = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function boardLevel() {\n    let tempBoard = Array.from(solvedBoard);\n    let newBoard = JSON.parse(JSON.stringify(solvedBoard));\n    console.log(tempBoard);\n\n    if (difficultyLevel === 1) {\n      for (let i = 0; i < 44; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    } else if (difficultyLevel === 2) {\n      for (let i = 0; i < 49; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    } else if (difficultyLevel === 3) {\n      for (let i = 0; i < 54; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n    SetCurrentBoard([...newBoard]);\n  } //function handleDifficulty(e){\n  //  console.log(e.target.id)\n  //  if(e.target.id === \"easy\"){\n  //    props.SetDifficultyLevel(1);\n  //  } else if (e.target.id === \"medium\"){\n  //    props.SetDifficultyLevel(2);\n  //  } else if(e.target.id === \"hard\"){\n  //    props.SetDifficultyLevel(3);\n  //\n  //  }\n  //  console.log(props.difficultyLevel)\n  //  generateBoard();\n  //}\n\n\n  function handleWindowSizeChange() {\n    SetWindowWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSizeChange);\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange);\n    };\n  }, []);\n  useEffect(() => {\n    // 👇️ move condition in hook\n    generateBoard();\n  }, [difficultyLevel]);\n  useEffect(() => {\n    boardLevel();\n  }, [solvedBoard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(SudokuBoard, \"nYCVLbByz6Db9x6bh3jODwtHd+o=\");\n\n_c = SudokuBoard;\nexport default SudokuBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","useContext","UserContext","Dropdown","SudokuBoard","props","solvedBoard","difficultyLevel","SetSolvedBoard","SetCurrentBoard","isSolved","SetIsSolved","setWindowWidth","startingBoard","generateBoard","matrix","Array","fill","map","rndNumbers","shuffle","i","k","splice","shift","console","log","SolveBoard","numberArray","currentIndex","length","randomIndex","Math","floor","random","FindZero","board","zeroPlacement","j","push","IsValidPlacement","row","col","value","boardToSolve","solved","nextZero","updatedBoard","boardLevel","tempBoard","from","newBoard","JSON","parse","stringify","randomCol","randomRow","error","handleWindowSizeChange","SetWindowWidth","window","innerWidth","addEventListener","removeEventListener"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBrain.js"],"sourcesContent":["import React,{useState,useEffect,useContext} from \"react\";\r\nimport { UserContext } from \"../userContext\";\r\nimport '../components/styles.css';\r\nimport Dropdown from \"./DropDown\";\r\n\r\nfunction SudokuBoard(props){\r\n  const {solvedBoard,difficultyLevel,SetSolvedBoard,SetCurrentBoard,isSolved,SetIsSolved,setWindowWidth} = useContext(UserContext);\r\n  let startingBoard = []\r\n \r\n  //const [solvedBoard,SetSolvedBoard] = useState([])\r\n  //const [startingBoard,SetStartingBoard] = useState([])\r\n  \r\n  function generateBoard(){\r\n    const matrix = Array(9).fill().map(() => Array(9).fill(0));\r\n\r\n  //  let nextZero = FindZero(board)\r\n  // 3 steps to randomly assign 3x3 squares of numbers\r\n  // Top left 3x3\r\n  let rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n  shuffle(rndNumbers);\r\n  for(let i = 0; i < 3; i++){\r\n    for(let k = 0; k < 3; k++){  \r\n     matrix[i][k] = rndNumbers[0]\r\n   rndNumbers.splice(0,1);\r\n    }\r\n  }\r\n  // re initialize rndNumbers and shuffle to add to middle 3x3\r\n  rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n    shuffle(rndNumbers);\r\n     for(let i = 3; i < 6; i++){\r\n       for(let k = 3; k < 6; k++){  \r\n        matrix[i][k] = rndNumbers[0]\r\n      rndNumbers.shift();\r\n       }\r\n     }\r\n\r\n        // shuffle and arrange the last 3x3 ( bottom right square)\r\n        // re initialize rndNumbers\r\n        rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n        shuffle(rndNumbers);\r\n         for(let i = 6; i < 9; i++){\r\n           for(let k = 6; k < 9; k++){  \r\n            matrix[i][k] = rndNumbers[0]\r\n          rndNumbers.shift();\r\n           }\r\n         }\r\n\r\n         console.log(matrix)\r\n         startingBoard = [...matrix];\r\n         console.log(startingBoard)\r\n\r\n        \r\n           SolveBoard(startingBoard);\r\n}\r\n\r\n\r\nfunction shuffle(numberArray) {\r\n  // Fisher Yates Shuffle //\r\n\r\n  let currentIndex = numberArray.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle.\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element.\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [numberArray[currentIndex], numberArray[randomIndex]] = [\r\n      numberArray[randomIndex], numberArray[currentIndex]];\r\n  }\r\n// Used like so\r\n  //console.log(numberArray);\r\n  return numberArray;\r\n\r\n}\r\n\r\nfunction FindZero(board){\r\n\r\n  \r\n  //finds next 0 on board and returns its location//\r\n  let zeroPlacement = [];\r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j = 0; j < board[i].length; j++){\r\n        if(board[i][j] === 0){\r\n          zeroPlacement.push(i);\r\n          zeroPlacement.push(j);\r\n          return zeroPlacement;\r\n          }\r\n          if(zeroPlacement.length !== 0){\r\n            return null;\r\n          }\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction IsValidPlacement(row,col,value){\r\n  // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\r\n   for(let i = 0; i < startingBoard.length; i++){\r\n    \r\n     if (startingBoard[row][i] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (startingBoard[i][col] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (startingBoard[Math.floor((row - row % 3) + i / 3)][Math.floor((col - col % 3) + i % 3)] === value)\r\n         {\r\n           return false;\r\n         }\r\n   }\r\n   return true;\r\n }\r\n\r\n function SolveBoard(boardToSolve){\r\n   \r\n  let solved = startingBoard;\r\n   \r\n  let nextZero = [];\r\n  nextZero = FindZero(solved);\r\n\r\n  // Base Case\r\n  // uses find_zero to locate 0, if there are no more 0, job done, return board\r\n  if(nextZero === null){\r\n    return solved\r\n  }\r\n  // Recursive Case\r\n  else\r\n  {\r\n    let row = nextZero[0];\r\n    let col = nextZero[1];\r\n   \r\n    for(let i = 1; i < 10; i++){\r\n      \r\n      if(IsValidPlacement(row,col,i) === true)\r\n      {\r\n\r\n        solved[row][col] = i; \r\n        let updatedBoard = []; \r\n        updatedBoard = SolveBoard(updatedBoard);\r\n        \r\n        // if there is a solution, return the solution\r\n        if(updatedBoard != null)\r\n        {\r\n          \r\n          solved = [...updatedBoard];\r\n         \r\n          \r\n          SetSolvedBoard([...solved])\r\n          startingBoard = [];\r\n          return updatedBoard\r\n        }\r\n        else\r\n        {\r\n          solved[row][col] = 0;\r\n        }\r\n      }\r\n    }\r\n    \r\n }}\r\n\r\n\r\n function boardLevel(){\r\n  \r\n  let tempBoard = Array.from(solvedBoard)\r\n  let newBoard = JSON.parse(JSON.stringify(solvedBoard));\r\n  console.log(tempBoard)\r\n\r\n  if(difficultyLevel === 1){\r\n    \r\n    for(let i = 0; i < 44; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n     \r\n    }\r\n  } else if(difficultyLevel === 2){\r\n    for(let i = 0; i < 49; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      \r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  } else if(difficultyLevel === 3){\r\n    for(let i = 0; i < 54; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      \r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  SetCurrentBoard([...newBoard])\r\n \r\n}\r\n\r\n\r\n \r\n\r\n\r\n  //function handleDifficulty(e){\r\n  //  console.log(e.target.id)\r\n  //  if(e.target.id === \"easy\"){\r\n  //    props.SetDifficultyLevel(1);\r\n  //  } else if (e.target.id === \"medium\"){\r\n  //    props.SetDifficultyLevel(2);\r\n  //  } else if(e.target.id === \"hard\"){\r\n  //    props.SetDifficultyLevel(3);\r\n//\r\n  //  }\r\n  //  console.log(props.difficultyLevel)\r\n  //  generateBoard();\r\n  //}\r\n  function handleWindowSizeChange() {\r\n    SetWindowWidth(window.innerWidth);\r\n}\r\n  useEffect(() => {\r\n    window.addEventListener('resize', handleWindowSizeChange);\r\n    return () => {\r\n        window.removeEventListener('resize', handleWindowSizeChange);\r\n    }\r\n}, []);\r\n\r\n useEffect(() => {\r\n  // 👇️ move condition in hook\r\n    generateBoard();\r\n}, [difficultyLevel]);\r\n\r\nuseEffect(()=>{\r\n  boardLevel();\r\n}, [solvedBoard])\r\n\r\n\r\n  return(\r\n    <>\r\n         \r\n    </>\r\n  )\r\n}\r\nexport default SudokuBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}