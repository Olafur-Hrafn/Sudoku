{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SudokuBrain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport '../components/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SudokuBoard(props) {\n  _s();\n\n  let startingBoard = []; //const [solvedBoard,SetSolvedBoard] = useState([])\n  //const [startingBoard,SetStartingBoard] = useState([])\n\n  function generateBoard() {\n    const matrix = Array(9).fill().map(() => Array(9).fill(0)); //  let nextZero = FindZero(board)\n    // 3 steps to randomly assign 3x3 squares of numbers\n    // Top left 3x3\n\n    let rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 0; i < 3; i++) {\n      for (let k = 0; k < 3; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.splice(0, 1);\n      }\n    } // re initialize rndNumbers and shuffle to add to middle 3x3\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 3; i < 6; i++) {\n      for (let k = 3; k < 6; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    } // shuffle and arrange the last 3x3 ( bottom right square)\n    // re initialize rndNumbers\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 6; i < 9; i++) {\n      for (let k = 6; k < 9; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    }\n\n    console.log(matrix);\n    startingBoard = [...matrix];\n    console.log(startingBoard);\n    SolveBoard(startingBoard);\n  }\n\n  function shuffle(numberArray) {\n    // Fisher Yates Shuffle //\n    let currentIndex = numberArray.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [numberArray[currentIndex], numberArray[randomIndex]] = [numberArray[randomIndex], numberArray[currentIndex]];\n    } // Used like so\n    //console.log(numberArray);\n\n\n    return numberArray;\n  }\n\n  function FindZero(board) {\n    //finds next 0 on board and returns its location//\n    let zeroPlacement = [];\n\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] === 0) {\n          zeroPlacement.push(i);\n          zeroPlacement.push(j);\n          return zeroPlacement;\n        }\n\n        if (zeroPlacement.length !== 0) {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function IsValidPlacement(row, col, value) {\n    // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\n    for (let i = 0; i < startingBoard.length; i++) {\n      if (startingBoard[row][i] === value) {\n        return false;\n      }\n\n      if (startingBoard[i][col] === value) {\n        return false;\n      }\n\n      if (startingBoard[Math.floor(row - row % 3 + i / 3)][Math.floor(col - col % 3 + i % 3)] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function SolveBoard(boardToSolve) {\n    let solved = startingBoard;\n    let nextZero = [];\n    nextZero = FindZero(solved); // Base Case\n    // uses find_zero to locate 0, if there are no more 0, job done, return board\n\n    if (nextZero === null) {\n      return solved;\n    } // Recursive Case\n    else {\n      let row = nextZero[0];\n      let col = nextZero[1];\n\n      for (let i = 1; i < 10; i++) {\n        if (IsValidPlacement(row, col, i) === true) {\n          solved[row][col] = i;\n          let updatedBoard = [];\n          updatedBoard = SolveBoard(updatedBoard); // if there is a solution, return the solution\n\n          if (updatedBoard != null) {\n            solved = [...updatedBoard];\n            props.SetSolvedBoard([...solved]);\n            startingBoard = [];\n            return updatedBoard;\n          } else {\n            solved[row][col] = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function boardLevel() {\n    console.log(\"hvað er solvedBoard\");\n    console.log(props.solvedBoard);\n    let tempBoard = Array.from(props.solvedBoard);\n    let newBoard = JSON.parse(JSON.stringify(props.solvedBoard));\n    console.log(tempBoard);\n\n    if (props.difficultyLevel === 1) {\n      for (let i = 0; i < 44; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    } else if (props.difficultyLevel === 2) {\n      for (let i = 0; i < 49; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    } else if (props.difficultyLevel === 3) {\n      for (let i = 0; i < 54; i++) {\n        const randomCol = Math.floor(Math.random() * newBoard.length);\n        const randomRow = Math.floor(Math.random() * newBoard.length);\n\n        try {\n          if (newBoard[randomCol][randomRow] !== 0) {\n            newBoard[randomCol][randomRow] = 0;\n          } else {\n            i--;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n    props.SetCurrentBoard([...newBoard]);\n  }\n\n  function handleDifficulty(e) {\n    console.log(e.target.value);\n\n    if (e.target.value === \"easy\") {\n      props.SetDifficultyLevel(1);\n    } else if (e.target.value === \"medium\") {\n      props.SetDifficultyLevel(2);\n    } else if (e.target.value === \"Hard\") {\n      props.SetDifficultyLevel(3);\n    }\n\n    console.log(props.difficultyLevel);\n    generateBoard();\n  }\n\n  function tester() {\n    console.log(props.solvedBoard);\n    console.log(props.currentBoard);\n  }\n\n  document.addEventListener(\"click\", e => {\n    const isDropDownButton = e.target.matches(\"[data-dropDown-button]\");\n\n    if (!isDropDownButton && e.target.closest(\"[data-dropDown]\") != null) {\n      return;\n    }\n\n    let currentDropDown;\n\n    if (isDropDownButton) {\n      currentDropDown = e.target.closest(\"[data-dropDown]\");\n      currentDropDown.classlist.toggle(\"active\");\n    }\n\n    document.querySelectorAll(\"[data-dropDown].active\").forEach(dropDown => {\n      if (dropDown === currentDropDown) return;\n      dropDown.classList;\n    });\n  });\n\n  function DropDowndifficulty() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropDown\",\n      \"data-dropDown\": true,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"link\",\n        \"data-dropDown-button\": true,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropDownMenu\",\n        children: \"Dropdown content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this) // <ul>\n    //   <li value=\"easy\" onClick={handleDifficulty}>easy</li>\n    //   <li value=\"medium\" onClick={handleDifficulty}>medium</li>\n    //   <li value=\"Hard\" onClick={handleDifficulty}>Hard</li>\n    // </ul>\n    ;\n  }\n\n  useEffect(() => {\n    // 👇️ move condition in hook\n    generateBoard();\n  }, []);\n  useEffect(() => {\n    boardLevel();\n  }, [props.solvedBoard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DropDowndifficulty, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"easy\",\n      onClick: handleDifficulty,\n      children: \"easy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"medium\",\n      onClick: handleDifficulty,\n      children: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"Hard\",\n      onClick: handleDifficulty,\n      children: \"Hard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"solve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tester,\n      children: \"currentBoard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: boardLevel,\n      children: \"boardlvl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SudokuBoard, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = SudokuBoard;\nexport default SudokuBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","SudokuBoard","props","startingBoard","generateBoard","matrix","Array","fill","map","rndNumbers","shuffle","i","k","splice","shift","console","log","SolveBoard","numberArray","currentIndex","length","randomIndex","Math","floor","random","FindZero","board","zeroPlacement","j","push","IsValidPlacement","row","col","value","boardToSolve","solved","nextZero","updatedBoard","SetSolvedBoard","boardLevel","solvedBoard","tempBoard","from","newBoard","JSON","parse","stringify","difficultyLevel","randomCol","randomRow","error","SetCurrentBoard","handleDifficulty","e","target","SetDifficultyLevel","tester","currentBoard","document","addEventListener","isDropDownButton","matches","closest","currentDropDown","classlist","toggle","querySelectorAll","forEach","dropDown","classList","DropDowndifficulty"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBrain.js"],"sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport '../components/styles.css';\r\n\r\nfunction SudokuBoard(props){\r\n  let startingBoard = []\r\n  //const [solvedBoard,SetSolvedBoard] = useState([])\r\n  //const [startingBoard,SetStartingBoard] = useState([])\r\n  \r\n  function generateBoard(){\r\n    const matrix = Array(9).fill().map(() => Array(9).fill(0));\r\n\r\n  //  let nextZero = FindZero(board)\r\n  // 3 steps to randomly assign 3x3 squares of numbers\r\n  // Top left 3x3\r\n  let rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n  shuffle(rndNumbers);\r\n  for(let i = 0; i < 3; i++){\r\n    for(let k = 0; k < 3; k++){  \r\n     matrix[i][k] = rndNumbers[0]\r\n   rndNumbers.splice(0,1);\r\n    }\r\n  }\r\n  // re initialize rndNumbers and shuffle to add to middle 3x3\r\n  rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n    shuffle(rndNumbers);\r\n     for(let i = 3; i < 6; i++){\r\n       for(let k = 3; k < 6; k++){  \r\n        matrix[i][k] = rndNumbers[0]\r\n      rndNumbers.shift();\r\n       }\r\n     }\r\n\r\n        // shuffle and arrange the last 3x3 ( bottom right square)\r\n        // re initialize rndNumbers\r\n        rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n        shuffle(rndNumbers);\r\n         for(let i = 6; i < 9; i++){\r\n           for(let k = 6; k < 9; k++){  \r\n            matrix[i][k] = rndNumbers[0]\r\n          rndNumbers.shift();\r\n           }\r\n         }\r\n\r\n         console.log(matrix)\r\n         startingBoard = [...matrix];\r\n         console.log(startingBoard)\r\n\r\n        \r\n           SolveBoard(startingBoard);\r\n}\r\n\r\n\r\nfunction shuffle(numberArray) {\r\n  // Fisher Yates Shuffle //\r\n\r\n  let currentIndex = numberArray.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle.\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element.\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [numberArray[currentIndex], numberArray[randomIndex]] = [\r\n      numberArray[randomIndex], numberArray[currentIndex]];\r\n  }\r\n// Used like so\r\n  //console.log(numberArray);\r\n  return numberArray;\r\n\r\n}\r\n\r\nfunction FindZero(board){\r\n\r\n  \r\n  //finds next 0 on board and returns its location//\r\n  let zeroPlacement = [];\r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j = 0; j < board[i].length; j++){\r\n        if(board[i][j] === 0){\r\n          zeroPlacement.push(i);\r\n          zeroPlacement.push(j);\r\n          return zeroPlacement;\r\n          }\r\n          if(zeroPlacement.length !== 0){\r\n            return null;\r\n          }\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction IsValidPlacement(row,col,value){\r\n  // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\r\n   for(let i = 0; i < startingBoard.length; i++){\r\n    \r\n     if (startingBoard[row][i] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (startingBoard[i][col] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (startingBoard[Math.floor((row - row % 3) + i / 3)][Math.floor((col - col % 3) + i % 3)] === value)\r\n         {\r\n           return false;\r\n         }\r\n   }\r\n   return true;\r\n }\r\n\r\n function SolveBoard(boardToSolve){\r\n   \r\n  let solved = startingBoard;\r\n   \r\n  let nextZero = [];\r\n  nextZero = FindZero(solved);\r\n\r\n  // Base Case\r\n  // uses find_zero to locate 0, if there are no more 0, job done, return board\r\n  if(nextZero === null){\r\n    return solved\r\n  }\r\n  // Recursive Case\r\n  else\r\n  {\r\n    let row = nextZero[0];\r\n    let col = nextZero[1];\r\n   \r\n    for(let i = 1; i < 10; i++){\r\n      \r\n      if(IsValidPlacement(row,col,i) === true)\r\n      {\r\n\r\n        solved[row][col] = i; \r\n        let updatedBoard = []; \r\n        updatedBoard = SolveBoard(updatedBoard);\r\n        \r\n        // if there is a solution, return the solution\r\n        if(updatedBoard != null)\r\n        {\r\n          \r\n          solved = [...updatedBoard];\r\n         \r\n          \r\n          props.SetSolvedBoard([...solved])\r\n          startingBoard = [];\r\n          return updatedBoard\r\n        }\r\n        else\r\n        {\r\n          solved[row][col] = 0;\r\n        }\r\n      }\r\n    }\r\n    \r\n }}\r\n\r\n\r\n function boardLevel(){\r\n  \r\n    \r\n    console.log(\"hvað er solvedBoard\");\r\n  console.log(props.solvedBoard)\r\n  let tempBoard = Array.from(props.solvedBoard)\r\n  let newBoard = JSON.parse(JSON.stringify(props.solvedBoard));\r\n  console.log(tempBoard)\r\n\r\n  if(props.difficultyLevel === 1){\r\n    \r\n    for(let i = 0; i < 44; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n     \r\n    }\r\n  } else if(props.difficultyLevel === 2){\r\n    for(let i = 0; i < 49; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      \r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  } else if(props.difficultyLevel === 3){\r\n    for(let i = 0; i < 54; i++){\r\n      const randomCol = Math.floor(Math.random() * newBoard.length);\r\n      const randomRow = Math.floor(Math.random() * newBoard.length);\r\n      \r\n      try {\r\n        if(newBoard[randomCol][randomRow] !== 0){\r\n          newBoard[randomCol][randomRow] = 0;\r\n        } else {\r\n          i--\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  props.SetCurrentBoard([...newBoard])\r\n \r\n}\r\n\r\n\r\n \r\n\r\n\r\n  function handleDifficulty(e){\r\n    console.log(e.target.value)\r\n    if(e.target.value === \"easy\"){\r\n      props.SetDifficultyLevel(1);\r\n    } else if (e.target.value === \"medium\"){\r\n      props.SetDifficultyLevel(2);\r\n    } else if(e.target.value === \"Hard\"){\r\n      props.SetDifficultyLevel(3);\r\n\r\n    }\r\n    console.log(props.difficultyLevel)\r\n    generateBoard();\r\n  }\r\n\r\n  function tester(){\r\n    console.log(props.solvedBoard);\r\n    console.log(props.currentBoard)\r\n   \r\n  }\r\n\r\n  document.addEventListener(\"click\", e => {\r\n    const isDropDownButton = e.target.matches(\"[data-dropDown-button]\");\r\n    if(!isDropDownButton && e.target.closest(\"[data-dropDown]\") != null){\r\n      return\r\n    }\r\n    let currentDropDown;\r\n    if(isDropDownButton){\r\n      currentDropDown = e.target.closest(\"[data-dropDown]\")\r\n      currentDropDown.classlist.toggle(\"active\")\r\n    }\r\n    document.querySelectorAll(\"[data-dropDown].active\").forEach(dropDown => {\r\n      if(dropDown === currentDropDown) return\r\n      dropDown.classList\r\n    })\r\n\r\n  })\r\n\r\n  function DropDowndifficulty(){\r\n    return (\r\n      <div className=\"dropDown\" data-dropDown>\r\n        <button className=\"link\" data-dropDown-button>New Game</button>\r\n        <div className=\"dropDownMenu\">\r\n          Dropdown content\r\n        </div>\r\n\r\n      </div>\r\n     // <ul>\r\n     //   <li value=\"easy\" onClick={handleDifficulty}>easy</li>\r\n     //   <li value=\"medium\" onClick={handleDifficulty}>medium</li>\r\n     //   <li value=\"Hard\" onClick={handleDifficulty}>Hard</li>\r\n     // </ul>\r\n    )\r\n  }\r\n\r\n useEffect(() => {\r\n  // 👇️ move condition in hook\r\n    generateBoard();\r\n}, []);\r\nuseEffect(()=>{\r\n  boardLevel();\r\n}, [props.solvedBoard])\r\n\r\n\r\n  return(\r\n    <>\r\n    <div>\r\n    \r\n      <DropDowndifficulty/>\r\n    </div>\r\n\r\n      <button value=\"easy\" onClick={handleDifficulty} >easy</button>\r\n      <button value=\"medium\" onClick={handleDifficulty} >medium</button>\r\n      <button value=\"Hard\" onClick={handleDifficulty} >Hard</button>\r\n      <button>solve</button>\r\n      <button onClick={tester} >currentBoard</button>\r\n      <button onClick={boardLevel} >boardlvl</button>\r\n      \r\n    </>\r\n  )\r\n}\r\nexport default SudokuBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}