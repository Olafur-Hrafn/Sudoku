{"ast":null,"code":"import _toConsumableArray from\"C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useEffect,useContext}from'react';import{UserContext}from'../userContext';import'../components/styles.css';import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function SudokuBoard(){var _useContext=useContext(UserContext),solvedBoard=_useContext.solvedBoard,difficultyLevel=_useContext.difficultyLevel,SetSolvedBoard=_useContext.SetSolvedBoard,SetCurrentBoard=_useContext.SetCurrentBoard;var startingBoard=[];function generateBoard(){var matrix=Array(9).fill().map(function(){return Array(9).fill(0);});//  let nextZero = FindZero(board)\n// 3 steps to randomly assign 3x3 squares of numbers\n// Top left 3x3\nvar rndNumbers=[1,2,3,4,5,6,7,8,9];shuffle(rndNumbers);for(var i=0;i<3;i++){for(var k=0;k<3;k++){matrix[i][k]=rndNumbers[0];rndNumbers.splice(0,1);}}// re initialize rndNumbers and shuffle to add to middle 3x3\nrndNumbers=[1,2,3,4,5,6,7,8,9];shuffle(rndNumbers);for(var _i=3;_i<6;_i++){for(var _k=3;_k<6;_k++){matrix[_i][_k]=rndNumbers[0];rndNumbers.shift();}}// shuffle and arrange the last 3x3 ( bottom right square)\n// re initialize rndNumbers\nrndNumbers=[1,2,3,4,5,6,7,8,9];shuffle(rndNumbers);for(var _i2=6;_i2<9;_i2++){for(var _k2=6;_k2<9;_k2++){matrix[_i2][_k2]=rndNumbers[0];rndNumbers.shift();}}startingBoard=_toConsumableArray(matrix);SolveBoard(startingBoard);}function shuffle(numberArray){// Fisher Yates Shuffle //\nvar currentIndex=numberArray.length,randomIndex;// While there remain elements to shuffle.\nwhile(currentIndex!==0){// Pick a remaining element.\nrandomIndex=Math.floor(Math.random()*currentIndex);currentIndex--;// And swap it with the current element.\nvar _ref=[numberArray[randomIndex],numberArray[currentIndex]];numberArray[currentIndex]=_ref[0];numberArray[randomIndex]=_ref[1];}// Used like so\n//console.log(numberArray);\nreturn numberArray;}function FindZero(board){//finds next 0 on board and returns its location//\nvar zeroPlacement=[];for(var i=0;i<board.length;i++){for(var j=0;j<board[i].length;j++){if(board[i][j]===0){zeroPlacement.push(i);zeroPlacement.push(j);return zeroPlacement;}if(zeroPlacement.length!==0){return null;}}}return null;}function IsValidPlacement(row,col,value){// 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\nfor(var i=0;i<startingBoard.length;i++){if(startingBoard[row][i]===value){return false;}if(startingBoard[i][col]===value){return false;}if(startingBoard[Math.floor(row-row%3+i/3)][Math.floor(col-col%3+i%3)]===value){return false;}}return true;}function SolveBoard(boardToSolve){var solved=startingBoard;var nextZero=[];nextZero=FindZero(solved);// Base Case\n// uses find_zero to locate 0, if there are no more 0, job done, return board\nif(nextZero===null){return solved;}// Recursive Case\nelse{var row=nextZero[0];var col=nextZero[1];for(var i=1;i<10;i++){if(IsValidPlacement(row,col,i)===true){solved[row][col]=i;var updatedBoard=[];updatedBoard=SolveBoard(updatedBoard);// if there is a solution, return the solution\nif(updatedBoard!=null){solved=_toConsumableArray(updatedBoard);SetSolvedBoard(_toConsumableArray(solved));startingBoard=[];return updatedBoard;}else{solved[row][col]=0;}}}}}function boardLevel(){//let tempBoard = Array.from(solvedBoard);\nvar newBoard=JSON.parse(JSON.stringify(solvedBoard));if(difficultyLevel===1){for(var i=0;i<44;i++){var randomCol=Math.floor(Math.random()*newBoard.length);var randomRow=Math.floor(Math.random()*newBoard.length);try{if(newBoard[randomCol][randomRow]!==0){newBoard[randomCol][randomRow]=0;}else{i--;}}catch(error){//console.log(error);\n}}}else if(difficultyLevel===2){for(var _i3=0;_i3<49;_i3++){var _randomCol=Math.floor(Math.random()*newBoard.length);var _randomRow=Math.floor(Math.random()*newBoard.length);try{if(newBoard[_randomCol][_randomRow]!==0){newBoard[_randomCol][_randomRow]=0;}else{_i3--;}}catch(error){//console.log(error);\n}}}else if(difficultyLevel===3){for(var _i4=0;_i4<54;_i4++){var _randomCol2=Math.floor(Math.random()*newBoard.length);var _randomRow2=Math.floor(Math.random()*newBoard.length);try{if(newBoard[_randomCol2][_randomRow2]!==0){newBoard[_randomCol2][_randomRow2]=0;}else{_i4--;}}catch(error){//console.log(error);\n}}}SetCurrentBoard(_toConsumableArray(newBoard));}useEffect(function(){generateBoard();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[difficultyLevel]);useEffect(function(){boardLevel();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[solvedBoard]);return/*#__PURE__*/_jsx(_Fragment,{});}export default SudokuBoard;","map":{"version":3,"names":["React","useEffect","useContext","UserContext","SudokuBoard","solvedBoard","difficultyLevel","SetSolvedBoard","SetCurrentBoard","startingBoard","generateBoard","matrix","Array","fill","map","rndNumbers","shuffle","i","k","splice","shift","SolveBoard","numberArray","currentIndex","length","randomIndex","Math","floor","random","FindZero","board","zeroPlacement","j","push","IsValidPlacement","row","col","value","boardToSolve","solved","nextZero","updatedBoard","boardLevel","newBoard","JSON","parse","stringify","randomCol","randomRow","error"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBrain.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\r\nimport { UserContext } from '../userContext';\r\nimport '../components/styles.css';\r\n\r\nfunction SudokuBoard() {\r\n  const { solvedBoard, difficultyLevel, SetSolvedBoard, SetCurrentBoard } =\r\n    useContext(UserContext);\r\n  let startingBoard = [];\r\n\r\n  function generateBoard() {\r\n    const matrix = Array(9)\r\n      .fill()\r\n      .map(() => Array(9).fill(0));\r\n\r\n    //  let nextZero = FindZero(board)\r\n    // 3 steps to randomly assign 3x3 squares of numbers\r\n    // Top left 3x3\r\n    let rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    shuffle(rndNumbers);\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let k = 0; k < 3; k++) {\r\n        matrix[i][k] = rndNumbers[0];\r\n        rndNumbers.splice(0, 1);\r\n      }\r\n    }\r\n    // re initialize rndNumbers and shuffle to add to middle 3x3\r\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    shuffle(rndNumbers);\r\n    for (let i = 3; i < 6; i++) {\r\n      for (let k = 3; k < 6; k++) {\r\n        matrix[i][k] = rndNumbers[0];\r\n        rndNumbers.shift();\r\n      }\r\n    }\r\n\r\n    // shuffle and arrange the last 3x3 ( bottom right square)\r\n    // re initialize rndNumbers\r\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    shuffle(rndNumbers);\r\n    for (let i = 6; i < 9; i++) {\r\n      for (let k = 6; k < 9; k++) {\r\n        matrix[i][k] = rndNumbers[0];\r\n        rndNumbers.shift();\r\n      }\r\n    }\r\n\r\n    startingBoard = [...matrix];\r\n\r\n    SolveBoard(startingBoard);\r\n  }\r\n\r\n  function shuffle(numberArray) {\r\n    // Fisher Yates Shuffle //\r\n\r\n    let currentIndex = numberArray.length,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex !== 0) {\r\n      // Pick a remaining element.\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [numberArray[currentIndex], numberArray[randomIndex]] = [\r\n        numberArray[randomIndex],\r\n        numberArray[currentIndex],\r\n      ];\r\n    }\r\n    // Used like so\r\n    //console.log(numberArray);\r\n    return numberArray;\r\n  }\r\n\r\n  function FindZero(board) {\r\n    //finds next 0 on board and returns its location//\r\n    let zeroPlacement = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        if (board[i][j] === 0) {\r\n          zeroPlacement.push(i);\r\n          zeroPlacement.push(j);\r\n          return zeroPlacement;\r\n        }\r\n        if (zeroPlacement.length !== 0) {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function IsValidPlacement(row, col, value) {\r\n    // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\r\n    for (let i = 0; i < startingBoard.length; i++) {\r\n      if (startingBoard[row][i] === value) {\r\n        return false;\r\n      }\r\n      if (startingBoard[i][col] === value) {\r\n        return false;\r\n      }\r\n      if (\r\n        startingBoard[Math.floor(row - (row % 3) + i / 3)][\r\n          Math.floor(col - (col % 3) + (i % 3))\r\n        ] === value\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function SolveBoard(boardToSolve) {\r\n    let solved = startingBoard;\r\n\r\n    let nextZero = [];\r\n    nextZero = FindZero(solved);\r\n\r\n    // Base Case\r\n    // uses find_zero to locate 0, if there are no more 0, job done, return board\r\n    if (nextZero === null) {\r\n      return solved;\r\n    }\r\n    // Recursive Case\r\n    else {\r\n      let row = nextZero[0];\r\n      let col = nextZero[1];\r\n\r\n      for (let i = 1; i < 10; i++) {\r\n        if (IsValidPlacement(row, col, i) === true) {\r\n          solved[row][col] = i;\r\n          let updatedBoard = [];\r\n          updatedBoard = SolveBoard(updatedBoard);\r\n\r\n          // if there is a solution, return the solution\r\n          if (updatedBoard != null) {\r\n            solved = [...updatedBoard];\r\n\r\n            SetSolvedBoard([...solved]);\r\n            startingBoard = [];\r\n            return updatedBoard;\r\n          } else {\r\n            solved[row][col] = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function boardLevel() {\r\n    //let tempBoard = Array.from(solvedBoard);\r\n    let newBoard = JSON.parse(JSON.stringify(solvedBoard));\r\n\r\n    if (difficultyLevel === 1) {\r\n      for (let i = 0; i < 44; i++) {\r\n        const randomCol = Math.floor(Math.random() * newBoard.length);\r\n        const randomRow = Math.floor(Math.random() * newBoard.length);\r\n        try {\r\n          if (newBoard[randomCol][randomRow] !== 0) {\r\n            newBoard[randomCol][randomRow] = 0;\r\n          } else {\r\n            i--;\r\n          }\r\n        } catch (error) {\r\n          //console.log(error);\r\n        }\r\n      }\r\n    } else if (difficultyLevel === 2) {\r\n      for (let i = 0; i < 49; i++) {\r\n        const randomCol = Math.floor(Math.random() * newBoard.length);\r\n        const randomRow = Math.floor(Math.random() * newBoard.length);\r\n\r\n        try {\r\n          if (newBoard[randomCol][randomRow] !== 0) {\r\n            newBoard[randomCol][randomRow] = 0;\r\n          } else {\r\n            i--;\r\n          }\r\n        } catch (error) {\r\n          //console.log(error);\r\n        }\r\n      }\r\n    } else if (difficultyLevel === 3) {\r\n      for (let i = 0; i < 54; i++) {\r\n        const randomCol = Math.floor(Math.random() * newBoard.length);\r\n        const randomRow = Math.floor(Math.random() * newBoard.length);\r\n\r\n        try {\r\n          if (newBoard[randomCol][randomRow] !== 0) {\r\n            newBoard[randomCol][randomRow] = 0;\r\n          } else {\r\n            i--;\r\n          }\r\n        } catch (error) {\r\n          //console.log(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    SetCurrentBoard([...newBoard]);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    generateBoard();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [difficultyLevel]);\r\n\r\n  useEffect(() => {\r\n    boardLevel();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [solvedBoard]);\r\n  \r\n\r\n  return <></>;\r\n}\r\nexport default SudokuBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}