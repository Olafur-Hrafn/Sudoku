{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SolvedScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useContext } from 'react';\nimport { UserContext } from '../userContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStopwatch, faLightbulb, faBrain } from '@fortawesome/free-solid-svg-icons';\nimport '../components/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SolvedScreen() {\n  _s();\n\n  const {\n    SetSolvedBoard,\n    SetIsSolved,\n    SetDifficultyLevel,\n    difficultyLevel,\n    isSolved,\n    scoreCard\n  } = useContext(UserContext);\n  let hint = localStorage.getItem(\"hintCounter\");\n\n  async function newGame(e) {\n    let lvl = parseInt(e.target.value);\n    SetDifficultyLevel(lvl);\n\n    if (lvl === 1) {\n      await SetDifficultyLevel(0);\n      SetDifficultyLevel(1);\n    } else if (lvl === 2) {\n      await SetDifficultyLevel(0);\n      SetDifficultyLevel(2);\n    } else if (lvl === 3) {\n      await SetDifficultyLevel(0);\n      SetDifficultyLevel(3);\n    }\n\n    if (isSolved) {\n      SetSolvedBoard([]);\n      SetIsSolved(current => !current);\n    }\n  }\n\n  const level = () => {\n    let levelName = 'hmmmmm';\n\n    if (difficultyLevel === 1) {\n      levelName = 'Easy';\n    } else if (difficultyLevel === 2) {\n      levelName = 'Medium';\n    } else if (difficultyLevel === 3) {\n      levelName = 'Hard';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: levelName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  };\n\n  let levelname = level();\n\n  let cardRender = () => {\n    if (!isSolved) {\n      return;\n    } else return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  };\n\n  let card = cardRender();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: card\n  }, void 0, false);\n}\n\n_s(SolvedScreen, \"JmLT1xOeNNtSFtv9t+cAPH+imVI=\");\n\n_c = SolvedScreen;\nexport default SolvedScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolvedScreen\");","map":{"version":3,"names":["React","useContext","UserContext","FontAwesomeIcon","faStopwatch","faLightbulb","faBrain","SolvedScreen","SetSolvedBoard","SetIsSolved","SetDifficultyLevel","difficultyLevel","isSolved","scoreCard","hint","localStorage","getItem","newGame","e","lvl","parseInt","target","value","current","level","levelName","levelname","cardRender","card"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SolvedScreen.js"],"sourcesContent":["import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { UserContext } from '../userContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faStopwatch,\r\n  faLightbulb,\r\n  faBrain,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport '../components/styles.css';\r\n\r\nfunction SolvedScreen() {\r\n  const {\r\n    SetSolvedBoard,\r\n    SetIsSolved,\r\n    SetDifficultyLevel,\r\n    difficultyLevel,\r\n    isSolved,\r\n    scoreCard,\r\n  } = useContext(UserContext);\r\n\r\n  let hint = localStorage.getItem (\"hintCounter\")\r\n\r\n  async function newGame(e) {\r\n    let lvl = parseInt(e.target.value);\r\n    SetDifficultyLevel(lvl);\r\n    if (lvl === 1) {\r\n      await SetDifficultyLevel(0);\r\n      SetDifficultyLevel(1);\r\n    } else if (lvl === 2) {\r\n      await SetDifficultyLevel(0);\r\n      SetDifficultyLevel(2);\r\n    } else if (lvl === 3) {\r\n      await SetDifficultyLevel(0);\r\n      SetDifficultyLevel(3);\r\n    }\r\n\r\n    if (isSolved) {\r\n      SetSolvedBoard([]);\r\n      SetIsSolved((current) => !current);\r\n    }\r\n  }\r\n\r\n  const level = () => {\r\n    let levelName = 'hmmmmm';\r\n    if (difficultyLevel === 1) {\r\n      levelName = 'Easy';\r\n    } else if (difficultyLevel === 2) {\r\n      levelName = 'Medium';\r\n    } else if (difficultyLevel === 3) {\r\n      levelName = 'Hard';\r\n    }\r\n    return <span>{levelName}</span>;\r\n  };\r\n\r\n  let levelname = level();\r\n\r\n  let cardRender = () => {\r\n    if(!isSolved){\r\n      return \r\n    } else return <></>;\r\n  }\r\n  let card = cardRender();\r\n    return (\r\n      <>\r\n        {card}\r\n      </>\r\n    );\r\n  \r\n}\r\n\r\nexport default SolvedScreen;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,OAHF,QAIO,mCAJP;AAKA,OAAO,0BAAP;;;;AAEA,SAASC,YAAT,GAAwB;EAAA;;EACtB,MAAM;IACJC,cADI;IAEJC,WAFI;IAGJC,kBAHI;IAIJC,eAJI;IAKJC,QALI;IAMJC;EANI,IAOFZ,UAAU,CAACC,WAAD,CAPd;EASA,IAAIY,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAsB,aAAtB,CAAX;;EAEA,eAAeC,OAAf,CAAuBC,CAAvB,EAA0B;IACxB,IAAIC,GAAG,GAAGC,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASC,KAAV,CAAlB;IACAZ,kBAAkB,CAACS,GAAD,CAAlB;;IACA,IAAIA,GAAG,KAAK,CAAZ,EAAe;MACb,MAAMT,kBAAkB,CAAC,CAAD,CAAxB;MACAA,kBAAkB,CAAC,CAAD,CAAlB;IACD,CAHD,MAGO,IAAIS,GAAG,KAAK,CAAZ,EAAe;MACpB,MAAMT,kBAAkB,CAAC,CAAD,CAAxB;MACAA,kBAAkB,CAAC,CAAD,CAAlB;IACD,CAHM,MAGA,IAAIS,GAAG,KAAK,CAAZ,EAAe;MACpB,MAAMT,kBAAkB,CAAC,CAAD,CAAxB;MACAA,kBAAkB,CAAC,CAAD,CAAlB;IACD;;IAED,IAAIE,QAAJ,EAAc;MACZJ,cAAc,CAAC,EAAD,CAAd;MACAC,WAAW,CAAEc,OAAD,IAAa,CAACA,OAAf,CAAX;IACD;EACF;;EAED,MAAMC,KAAK,GAAG,MAAM;IAClB,IAAIC,SAAS,GAAG,QAAhB;;IACA,IAAId,eAAe,KAAK,CAAxB,EAA2B;MACzBc,SAAS,GAAG,MAAZ;IACD,CAFD,MAEO,IAAId,eAAe,KAAK,CAAxB,EAA2B;MAChCc,SAAS,GAAG,QAAZ;IACD,CAFM,MAEA,IAAId,eAAe,KAAK,CAAxB,EAA2B;MAChCc,SAAS,GAAG,MAAZ;IACD;;IACD,oBAAO;MAAA,UAAOA;IAAP;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAVD;;EAYA,IAAIC,SAAS,GAAGF,KAAK,EAArB;;EAEA,IAAIG,UAAU,GAAG,MAAM;IACrB,IAAG,CAACf,QAAJ,EAAa;MACX;IACD,CAFD,MAEO,oBAAO,qCAAP;EACR,CAJD;;EAKA,IAAIgB,IAAI,GAAGD,UAAU,EAArB;EACE,oBACE;IAAA,UACGC;EADH,iBADF;AAMH;;GA1DQrB,Y;;KAAAA,Y;AA4DT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}