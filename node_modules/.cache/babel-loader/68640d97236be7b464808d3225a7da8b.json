{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SudokuBoard.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SudokuBoard() {\n  function generateBoard() {\n    let board = new Array(9).fill(new Array(9).fill(0));\n    let nextZero = FindZero(board); //Base case - if there are no zero´s on the board, return board\n\n    if (nextZero === null) {\n      return board;\n    } // Recursive case - \n    else {\n      let row = nextZero[0];\n      let col = nextZero[1];\n      console.log(row + \" - \" + col);\n    }\n  }\n\n  function FindZero(board) {\n    //finds next 0 on board and returns its location//\n    let zeroPlacement = [];\n\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] === 0) {\n          zeroPlacement.push(i);\n          zeroPlacement.push(j);\n          return zeroPlacement;\n        }\n\n        if (zeroPlacement.length !== 0) {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function IsValidPlacement(row, col, value, board) {\n    // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\n    for (let i = 0; i < board.length; i++) {\n      if (board[row][i] === value) {\n        return false;\n      }\n\n      if (board[i][col] === value) {\n        return false;\n      }\n\n      if (board[Math.floor(row - row % 3 + i / 3)][Math.floor(col - col % 3 + i % 3)] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      onClick: generateBoard,\n      children: \"h\\xE6 \\xE9g er board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = SudokuBoard;\nexport default SudokuBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","SudokuBoard","generateBoard","board","Array","fill","nextZero","FindZero","row","col","console","log","zeroPlacement","i","length","j","push","IsValidPlacement","value","Math","floor"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBoard.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction SudokuBoard(){\r\n  function generateBoard(){\r\n    let board  = new Array(9).fill(new Array(9).fill(0));\r\n    let nextZero = FindZero(board)\r\n    \r\n    //Base case - if there are no zero´s on the board, return board\r\n    if(nextZero === null){\r\n      return board;\r\n    } \r\n    // Recursive case - \r\n    else {\r\n      let row = nextZero[0];\r\n      let col = nextZero[1];\r\n      console.log(row + \" - \" + col)\r\n    }\r\n\r\n     \r\n\r\n}\r\n\r\nfunction FindZero(board){\r\n  //finds next 0 on board and returns its location//\r\n  let zeroPlacement = [];\r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j = 0; j < board[i].length; j++){\r\n        if(board[i][j] === 0){\r\n          zeroPlacement.push(i);\r\n          zeroPlacement.push(j);\r\n          return zeroPlacement;\r\n          }\r\n          if(zeroPlacement.length !== 0){\r\n            return null;\r\n          }\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction IsValidPlacement(row,col,value, board){\r\n  // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\r\n   for(let i = 0; i < board.length; i++){\r\n    \r\n     if (board[row][i] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (board[i][col] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (board[Math.floor((row - row % 3) + i / 3)][Math.floor((col - col % 3) + i % 3)] === value)\r\n         {\r\n           return false;\r\n         }\r\n   }\r\n   return true;\r\n }\r\n\r\n  return(\r\n    <>\r\n      <h2 onClick={generateBoard}>hæ ég er board</h2>\r\n    </>\r\n  )\r\n}\r\nexport default SudokuBoard;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,WAAT,GAAsB;EACpB,SAASC,aAAT,GAAwB;IACtB,IAAIC,KAAK,GAAI,IAAIC,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,IAAID,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,CAAlB,CAAlB,CAAb;IACA,IAAIC,QAAQ,GAAGC,QAAQ,CAACJ,KAAD,CAAvB,CAFsB,CAItB;;IACA,IAAGG,QAAQ,KAAK,IAAhB,EAAqB;MACnB,OAAOH,KAAP;IACD,CAFD,CAGA;IAHA,KAIK;MACH,IAAIK,GAAG,GAAGF,QAAQ,CAAC,CAAD,CAAlB;MACA,IAAIG,GAAG,GAAGH,QAAQ,CAAC,CAAD,CAAlB;MACAI,OAAO,CAACC,GAAR,CAAYH,GAAG,GAAG,KAAN,GAAcC,GAA1B;IACD;EAIJ;;EAED,SAASF,QAAT,CAAkBJ,KAAlB,EAAwB;IACtB;IACA,IAAIS,aAAa,GAAG,EAApB;;IACE,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,KAAK,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;MACnC,KAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,KAAK,CAACU,CAAD,CAAL,CAASC,MAA5B,EAAoCC,CAAC,EAArC,EAAwC;QACtC,IAAGZ,KAAK,CAACU,CAAD,CAAL,CAASE,CAAT,MAAgB,CAAnB,EAAqB;UACnBH,aAAa,CAACI,IAAd,CAAmBH,CAAnB;UACAD,aAAa,CAACI,IAAd,CAAmBD,CAAnB;UACA,OAAOH,aAAP;QACC;;QACD,IAAGA,aAAa,CAACE,MAAd,KAAyB,CAA5B,EAA8B;UAC5B,OAAO,IAAP;QACD;MACJ;IACF;;IACD,OAAO,IAAP;EACH;;EAED,SAASG,gBAAT,CAA0BT,GAA1B,EAA8BC,GAA9B,EAAkCS,KAAlC,EAAyCf,KAAzC,EAA+C;IAC7C;IACC,KAAI,IAAIU,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,KAAK,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;MAEnC,IAAIV,KAAK,CAACK,GAAD,CAAL,CAAWK,CAAX,MAAkBK,KAAtB,EACI;QACE,OAAO,KAAP;MACD;;MACL,IAAIf,KAAK,CAACU,CAAD,CAAL,CAASJ,GAAT,MAAkBS,KAAtB,EACI;QACE,OAAO,KAAP;MACD;;MACL,IAAIf,KAAK,CAACgB,IAAI,CAACC,KAAL,CAAYZ,GAAG,GAAGA,GAAG,GAAG,CAAb,GAAkBK,CAAC,GAAG,CAAjC,CAAD,CAAL,CAA2CM,IAAI,CAACC,KAAL,CAAYX,GAAG,GAAGA,GAAG,GAAG,CAAb,GAAkBI,CAAC,GAAG,CAAjC,CAA3C,MAAoFK,KAAxF,EACI;QACE,OAAO,KAAP;MACD;IACN;;IACD,OAAO,IAAP;EACD;;EAEA,oBACE;IAAA,uBACE;MAAI,OAAO,EAAEhB,aAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAKD;;KA/DQD,W;AAgET,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}