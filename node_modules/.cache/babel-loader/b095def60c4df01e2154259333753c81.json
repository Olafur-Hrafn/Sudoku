{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SolvedScreen.js\";\nimport React from \"react\";\nimport '../components/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SolvedScreen(props) {\n  const isSolved = props.isSolved;\n\n  const level = () => {};\n\n  if (isSolved) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SolvedCardContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(\"0\" + Math.floor(props.scoreCard.time / 60000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: (\"0\" + Math.floor(props.scoreCard.time / 1000 % 60)).slice(-2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: props.difficultyLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = SolvedScreen;\nexport default SolvedScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolvedScreen\");","map":{"version":3,"names":["React","SolvedScreen","props","isSolved","level","Math","floor","scoreCard","time","slice","difficultyLevel"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SolvedScreen.js"],"sourcesContent":["import React from \"react\";\r\nimport '../components/styles.css'\r\n\r\nfunction SolvedScreen(props){\r\n  const isSolved = props.isSolved;\r\n\r\nconst level = () => {\r\n\r\n}\r\n\r\n  if(isSolved){\r\n\r\n  \r\n  return(\r\n    <div className=\"SolvedCardContainer\">\r\n      <span>{(\"0\" + Math.floor((props.scoreCard.time / 60000) % 60)).slice(-2)}:</span>\r\n        <span>{(\"0\" + Math.floor((props.scoreCard.time / 1000) % 60)).slice(-2)}</span>\r\n        <div>{props.difficultyLevel}</div>\r\n    </div>\r\n  )\r\n  }\r\n  return <></>\r\n}\r\n\r\nexport default SolvedScreen;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;EAC1B,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;;EAEF,MAAMC,KAAK,GAAG,MAAM,CAEnB,CAFD;;EAIE,IAAGD,QAAH,EAAY;IAGZ,oBACE;MAAK,SAAS,EAAC,qBAAf;MAAA,wBACE;QAAA,WAAO,CAAC,MAAME,IAAI,CAACC,KAAL,CAAYJ,KAAK,CAACK,SAAN,CAAgBC,IAAhB,GAAuB,KAAxB,GAAiC,EAA5C,CAAP,EAAwDC,KAAxD,CAA8D,CAAC,CAA/D,CAAP;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEI;QAAA,UAAO,CAAC,MAAMJ,IAAI,CAACC,KAAL,CAAYJ,KAAK,CAACK,SAAN,CAAgBC,IAAhB,GAAuB,IAAxB,GAAgC,EAA3C,CAAP,EAAuDC,KAAvD,CAA6D,CAAC,CAA9D;MAAP;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA,UAAMP,KAAK,CAACQ;MAAZ;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAOC;;EACD,oBAAO,qCAAP;AACD;;KAnBQT,Y;AAqBT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}