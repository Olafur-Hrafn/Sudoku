{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SudokuBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SudokuBoard() {\n  _s();\n\n  const [solvedBoard, SetSolvedBoard] = useState([]);\n  const [startingBoard, SetStartingBoard] = useState([]);\n\n  function generateBoard() {\n    const matrix = Array(9).fill().map(() => Array(9).fill(0)); //  let nextZero = FindZero(board)\n    // 3 steps to randomly assign 3x3 squares of numbers\n    // Top left 3x3\n\n    let rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 0; i < 3; i++) {\n      for (let k = 0; k < 3; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.splice(0, 1);\n      }\n    } // re initialize rndNumbers and shuffle to add to middle 3x3\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 3; i < 6; i++) {\n      for (let k = 3; k < 6; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    } // shuffle and arrange the last 3x3 ( bottom right square)\n    // re initialize rndNumbers\n\n\n    rndNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    shuffle(rndNumbers);\n\n    for (let i = 6; i < 9; i++) {\n      for (let k = 6; k < 9; k++) {\n        matrix[i][k] = rndNumbers[0];\n        rndNumbers.shift();\n      }\n    }\n\n    console.log(matrix);\n    SetStartingBoard([...matrix]);\n  }\n\n  function shuffle(numberArray) {\n    // Fisher Yates Shuffle //\n    let currentIndex = numberArray.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [numberArray[currentIndex], numberArray[randomIndex]] = [numberArray[randomIndex], numberArray[currentIndex]];\n    } // Used like so\n    //console.log(numberArray);\n\n\n    return numberArray;\n  }\n\n  function FindZero(board) {\n    let solved = [...startingBoard];\n    let nextZero = [];\n    nextZero = FindZero(board);\n    console.log(nextZero); //finds next 0 on board and returns its location//\n    // let zeroPlacement = [];\n    //   for(let i = 0; i < board.length; i++){\n    //     for(let j = 0; j < board[i].length; j++){\n    //       if(board[i][j] === 0){\n    //         zeroPlacement.push(i);\n    //         zeroPlacement.push(j);\n    //         console.log(zeroPlacement)\n    //         return zeroPlacement;\n    //         }\n    //         if(zeroPlacement.length !== 0){\n    //           return null;\n    //         }\n    //     }\n    //   }\n    //   return null;\n  }\n\n  function IsValidPlacement(row, col, value, board) {\n    // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\n    for (let i = 0; i < board.length; i++) {\n      if (board[row][i] === value) {\n        return false;\n      }\n\n      if (board[i][col] === value) {\n        return false;\n      }\n\n      if (board[Math.floor(row - row % 3 + i / 3)][Math.floor(col - col % 3 + i % 3)] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function SolveBoard() {\n    let solved = startingBoard;\n    let nextZero = [];\n    nextZero = FindZero(solved);\n    console.log(solved); // Base Case\n    // uses find_zero to locate 0, if there are no more 0, job done, return board\n\n    if (nextZero === null) {\n      return solved;\n    } // Recursive Case\n    else {\n      let row = nextZero[0];\n      let col = nextZero[1];\n\n      for (let i = 1; i < 10; i++) {\n        if (IsValidPlacement(row, col, i, solved) === true) {\n          solved[row][col] = i;\n          let updatedBoard = [];\n          updatedBoard = SolveBoard(); // if there is a solution, return the solution\n\n          if (updatedBoard != null) {\n            solved = updatedBoard; // sudokuSolution = updatedBoard;\n            //console.log(sudokuBoard)\n            //bætti inn hér\n            // updatedBoard = sudokuSolution;\n\n            return updatedBoard;\n          } // if there is not a solution, assign back to 0\n          else {\n            solved[row][col] = 0;\n          }\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      onClick: generateBoard,\n      children: \"h\\xE6 \\xE9g er board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => FindZero(startingBoard),\n      children: \"Solve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SudokuBoard, \"Sv8AczZpdMv0w/Y/CXFSECeuXLA=\");\n\n_c = SudokuBoard;\nexport default SudokuBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","SudokuBoard","solvedBoard","SetSolvedBoard","startingBoard","SetStartingBoard","generateBoard","matrix","Array","fill","map","rndNumbers","shuffle","i","k","splice","shift","console","log","numberArray","currentIndex","length","randomIndex","Math","floor","random","FindZero","board","solved","nextZero","IsValidPlacement","row","col","value","SolveBoard","updatedBoard"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBoard.js"],"sourcesContent":["import React,{useState} from \"react\";\r\n\r\nfunction SudokuBoard(){\r\n  const [solvedBoard,SetSolvedBoard] = useState([])\r\n  const [startingBoard,SetStartingBoard] = useState([])\r\n\r\n  function generateBoard(){\r\n    const matrix = Array(9).fill().map(() => Array(9).fill(0));\r\n\r\n  //  let nextZero = FindZero(board)\r\n  // 3 steps to randomly assign 3x3 squares of numbers\r\n  // Top left 3x3\r\n  let rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n  shuffle(rndNumbers);\r\n  for(let i = 0; i < 3; i++){\r\n    for(let k = 0; k < 3; k++){  \r\n     matrix[i][k] = rndNumbers[0]\r\n   rndNumbers.splice(0,1);\r\n    }\r\n  }\r\n  // re initialize rndNumbers and shuffle to add to middle 3x3\r\n  rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n    shuffle(rndNumbers);\r\n     for(let i = 3; i < 6; i++){\r\n       for(let k = 3; k < 6; k++){  \r\n        matrix[i][k] = rndNumbers[0]\r\n      rndNumbers.shift();\r\n       }\r\n     }\r\n\r\n        // shuffle and arrange the last 3x3 ( bottom right square)\r\n        // re initialize rndNumbers\r\n        rndNumbers = [1,2,3,4,5,6,7,8,9];\r\n        shuffle(rndNumbers);\r\n         for(let i = 6; i < 9; i++){\r\n           for(let k = 6; k < 9; k++){  \r\n            matrix[i][k] = rndNumbers[0]\r\n          rndNumbers.shift();\r\n           }\r\n         }\r\n\r\n         console.log(matrix)\r\n         SetStartingBoard([...matrix])\r\n}\r\n\r\n\r\nfunction shuffle(numberArray) {\r\n  // Fisher Yates Shuffle //\r\n\r\n  let currentIndex = numberArray.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle.\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element.\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [numberArray[currentIndex], numberArray[randomIndex]] = [\r\n      numberArray[randomIndex], numberArray[currentIndex]];\r\n  }\r\n// Used like so\r\n  //console.log(numberArray);\r\n  return numberArray;\r\n\r\n}\r\n\r\nfunction FindZero(board){\r\n  let solved = [...startingBoard];\r\n  let nextZero = [];\r\n  nextZero = FindZero(board);\r\n  console.log(nextZero)\r\n\r\n\r\n  //finds next 0 on board and returns its location//\r\n // let zeroPlacement = [];\r\n //   for(let i = 0; i < board.length; i++){\r\n //     for(let j = 0; j < board[i].length; j++){\r\n //       if(board[i][j] === 0){\r\n //         zeroPlacement.push(i);\r\n //         zeroPlacement.push(j);\r\n //         console.log(zeroPlacement)\r\n //         return zeroPlacement;\r\n //         }\r\n //         if(zeroPlacement.length !== 0){\r\n //           return null;\r\n //         }\r\n //     }\r\n //   }\r\n //   return null;\r\n}\r\n\r\nfunction IsValidPlacement(row,col,value, board){\r\n  // 3 if statements, nr. 1 checks for horizontal duplicates. Nr 2 = Vertical duplicates. Nr 3 = 3x3 block duplicated\r\n   for(let i = 0; i < board.length; i++){\r\n    \r\n     if (board[row][i] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (board[i][col] === value)\r\n         {\r\n           return false;\r\n         }\r\n     if (board[Math.floor((row - row % 3) + i / 3)][Math.floor((col - col % 3) + i % 3)] === value)\r\n         {\r\n           return false;\r\n         }\r\n   }\r\n   return true;\r\n }\r\n\r\n function SolveBoard(){\r\n   let solved = startingBoard;\r\n  let nextZero = [];\r\n  nextZero = FindZero(solved);\r\n  console.log(solved)\r\n\r\n  // Base Case\r\n  // uses find_zero to locate 0, if there are no more 0, job done, return board\r\n  if(nextZero === null){\r\n    return solved\r\n  }\r\n  // Recursive Case\r\n  else\r\n  {\r\n    let row = nextZero[0];\r\n    let col = nextZero[1];\r\n   \r\n    for(let i = 1; i < 10; i++){\r\n      \r\n      if(IsValidPlacement(row,col,i,solved) === true)\r\n      {\r\n\r\n        solved[row][col] = i; \r\n        let updatedBoard = []; \r\n        updatedBoard = SolveBoard();\r\n        \r\n        // if there is a solution, return the solution\r\n        if(updatedBoard != null)\r\n        {\r\n          \r\n          solved = updatedBoard;\r\n         // sudokuSolution = updatedBoard;\r\n          //console.log(sudokuBoard)\r\n          //bætti inn hér\r\n         // updatedBoard = sudokuSolution;\r\n          \r\n          return updatedBoard\r\n        }\r\n        // if there is not a solution, assign back to 0\r\n        else\r\n        {\r\n          solved[row][col] = 0;\r\n        }\r\n      }\r\n}\r\n }}\r\n\r\n  return(\r\n    <>\r\n      <h2 onClick={generateBoard}>hæ ég er board</h2>\r\n      <button onClick={() => FindZero(startingBoard)} >Solve</button>\r\n    </>\r\n  )\r\n}\r\nexport default SudokuBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}