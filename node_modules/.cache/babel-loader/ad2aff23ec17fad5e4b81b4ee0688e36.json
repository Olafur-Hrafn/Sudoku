{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\devProjects\\\\sudokuManiac\\\\sudoku_app\\\\src\\\\components\\\\SudokuBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const [state, SetState] = useState(false);\n  let liveBoard = [];\n  console.log(\"herna...\");\n  console.log(props.solvedBoard); //  console.log(\"this is the current board sent from parent, built from suduko brain\")\n  //console.log(props.currentBoard)\n  //liveBoard = await[...tempBoard];\n\n  function printBoard(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] === 0) {\n          liveBoard.push('  ');\n        } else {\n          liveBoard.push(board[i][j]);\n        }\n      }\n    }\n\n    return liveBoard.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      tabIndex: \"0\",\n      className: \"SudokuBlock\",\n      children: item\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this));\n    /* \r\n    function renderToArr (board) {\r\n        for(let i = 0; i < board.length; i++){\r\n      for(let j =0; j < board[i].length; j++){\r\n        \r\n        if(board[i][j] === 0){ newarr.push('  ')}\r\n        else {newarr.push(board[i][j])}\r\n      }\r\n    }\r\n      \r\n        \r\n    return newarr.map((item, idx) => ( \r\n      <div\r\n        key={idx}\r\n        ref={refs.current[idx]}\r\n        tabIndex='0'\r\n        className='SudokuBlock'\r\n        onKeyDown={(e) => handleMovement(e,idx)} \r\n      >\r\n        {item}\r\n      </div>\r\n    ));\r\n    };\r\n    */\n    // TODO\n    // prenta út div fyrir hvert stak, og gera handleinput á það.\n    // console.log(props.currentBoard);;\n  } //  useEffect(() =>{\n  //    \n  //    if(!state){\n  //      SetState(true)\n  //    } else {\n  //      SetState(false)\n  //    }\n  //  },[])\n  //  useEffect(() => {\n  //    printBoard();\n  //\n  //    \n  //  }, [state]);\n\n\n  let board = printBoard(props.solvedBoard);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: board\n  }, void 0, false);\n}\n\n_s(Board, \"kdJoJ8JVQHwQVjw5VftOfsBOPj0=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","Board","props","state","SetState","liveBoard","console","log","solvedBoard","printBoard","board","i","length","j","push","map","item","idx"],"sources":["C:/Users/User/Documents/devProjects/sudokuManiac/sudoku_app/src/components/SudokuBoard.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\n\r\nfunction Board(props){\r\n  const [state,SetState] = useState(false);\r\n  let liveBoard = [];\r\n  console.log(\"herna...\");\r\n  console.log(props.solvedBoard)\r\n  \r\n//  console.log(\"this is the current board sent from parent, built from suduko brain\")\r\n//console.log(props.currentBoard)\r\n  \r\n    \r\n    \r\n   //liveBoard = await[...tempBoard];\r\n  \r\n\r\n  function printBoard(board){\r\n\r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j =0; j < board[i].length; j++){\r\n        \r\n        if(board[i][j] === 0){ liveBoard.push('  ')}\r\n        else {liveBoard.push(board[i][j])}\r\n      }\r\n    }\r\n\r\n    return liveBoard.map((item, idx) => ( \r\n      <div\r\n        key={idx}\r\n        tabIndex='0'\r\n        className='SudokuBlock'\r\n      >\r\n        {item}\r\n      </div>\r\n    ));\r\n    /* \r\n    function renderToArr (board) {\r\n  \r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j =0; j < board[i].length; j++){\r\n        \r\n        if(board[i][j] === 0){ newarr.push('  ')}\r\n        else {newarr.push(board[i][j])}\r\n      }\r\n    }\r\n\r\n    \r\n        \r\n    return newarr.map((item, idx) => ( \r\n      <div\r\n        key={idx}\r\n        ref={refs.current[idx]}\r\n        tabIndex='0'\r\n        className='SudokuBlock'\r\n        onKeyDown={(e) => handleMovement(e,idx)} \r\n      >\r\n        {item}\r\n      </div>\r\n    ));\r\n  };\r\n    */\r\n    // TODO\r\n    // prenta út div fyrir hvert stak, og gera handleinput á það.\r\n\r\n\r\n   // console.log(props.currentBoard);;\r\n  }\r\n   \r\n//  useEffect(() =>{\r\n//    \r\n//    if(!state){\r\n//      SetState(true)\r\n//    } else {\r\n//      SetState(false)\r\n//    }\r\n//  },[])\r\n//  useEffect(() => {\r\n//    printBoard();\r\n//\r\n//    \r\n//  }, [state]);\r\nlet board = printBoard(props.solvedBoard)\r\n  return(\r\n    <>\r\n      {board}\r\n\r\n    </>\r\n  );\r\n}\r\nexport default Board;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;AAGA,SAASC,KAAT,CAAeC,KAAf,EAAqB;EAAA;;EACnB,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,KAAD,CAAjC;EACA,IAAIK,SAAS,GAAG,EAAhB;EACAC,OAAO,CAACC,GAAR,CAAY,UAAZ;EACAD,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,WAAlB,EAJmB,CAMrB;EACA;EAIG;;EAGD,SAASC,UAAT,CAAoBC,KAApB,EAA0B;IAExB,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;MACnC,KAAI,IAAIE,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAGH,KAAK,CAACC,CAAD,CAAL,CAASC,MAA3B,EAAmCC,CAAC,EAApC,EAAuC;QAErC,IAAGH,KAAK,CAACC,CAAD,CAAL,CAASE,CAAT,MAAgB,CAAnB,EAAqB;UAAER,SAAS,CAACS,IAAV,CAAe,IAAf;QAAqB,CAA5C,MACK;UAACT,SAAS,CAACS,IAAV,CAAeJ,KAAK,CAACC,CAAD,CAAL,CAASE,CAAT,CAAf;QAA4B;MACnC;IACF;;IAED,OAAOR,SAAS,CAACU,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACnB;MAEE,QAAQ,EAAC,GAFX;MAGE,SAAS,EAAC,aAHZ;MAAA,UAKGD;IALH,GACOC,GADP;MAAA;MAAA;MAAA;IAAA,QADK,CAAP;IASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAGI;IACA;IAGD;EACA,CAhEkB,CAkErB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,IAAIP,KAAK,GAAGD,UAAU,CAACP,KAAK,CAACM,WAAP,CAAtB;EACE,oBACE;IAAA,UACGE;EADH,iBADF;AAMD;;GAtFQT,K;;KAAAA,K;AAuFT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}